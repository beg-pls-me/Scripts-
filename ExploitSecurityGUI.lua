--[[
    Advanced Security Exploit GUI
    Mobile-Friendly Roblox Security Testing Tool
    Based on Lewis Security Scan Results
    
    Features:
    - Movable floating button
    - Exploit vulnerable remotes and backdoors
    - Test server script access
    - Bypass client-side anti-exploits
    - Mobile-optimized interface
    - Real-time vulnerability testing
]]

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Exploit Functions
local ExploitFunctions = {}

-- Test server script access (Critical vulnerability)
function ExploitFunctions.testServerScriptAccess()
    local success, result = pcall(function()
        return game.ServerScriptService
    end)
    
    if success and result then
        return {
            success = true,
            message = "üö® CRITICAL: ServerScriptService accessible from client!",
            data = result
        }
    else
        return {
            success = false,
            message = "‚ùå ServerScriptService access blocked",
            data = nil
        }
    end
end

-- Test backdoor remotes
function ExploitFunctions.testBackdoorRemotes()
    local results = {}
    local backdoors = {
        "GetServerVersion",
        "GetServerChannel", 
        "GetServerType",
        "CmdrFunction",
        "CmdrEvent"
    }
    
    for _, backdoorName in ipairs(backdoors) do
        local success, remote = pcall(function()
            return ReplicatedStorage:FindFirstChild(backdoorName, true)
        end)
        
        if success and remote then
            table.insert(results, {
                name = backdoorName,
                path = remote:GetFullName(),
                type = remote.ClassName,
                accessible = true
            })
        end
    end
    
    return results
end

-- Exploit vulnerable RemoteEvents
function ExploitFunctions.exploitRemoteEvents()
    local vulnerableRemotes = {
        "DisplayChatMessage",
        "PlaySound", 
        "Spawn_Arrow",
        "Close_Frames",
        "DeveloperPurchase",
        "FireDrop",
        "AcceptPetGift"
    }
    
    local results = {}
    
    for _, remoteName in ipairs(vulnerableRemotes) do
        local success, remote = pcall(function()
            return ReplicatedStorage:FindFirstChild(remoteName, true)
        end)
        
        if success and remote and remote:IsA("RemoteEvent") then
            -- Test firing the remote with various payloads
            local testSuccess = pcall(function()
                remote:FireServer("EXPLOIT_TEST", {test = true, exploit = "SecurityGUI"})
            end)
            
            table.insert(results, {
                name = remoteName,
                path = remote:GetFullName(),
                exploitable = testSuccess,
                status = testSuccess and "‚úÖ Exploitable" or "‚ùå Protected"
            })
        end
    end
    
    return results
end

-- Test RemoteFunction exploits
function ExploitFunctions.exploitRemoteFunctions()
    local vulnerableFunctions = {
        "TrowelRemote",
        "HarvestRemote",
        "FavoriteToolRemote",
        "LikeGarden"
    }
    
    local results = {}
    
    for _, functionName in ipairs(vulnerableFunctions) do
        local success, remoteFunc = pcall(function()
            return ReplicatedStorage:FindFirstChild(functionName, true)
        end)
        
        if success and remoteFunc and remoteFunc:IsA("RemoteFunction") then
            local testSuccess, response = pcall(function()
                return remoteFunc:InvokeServer("EXPLOIT_TEST")
            end)
            
            table.insert(results, {
                name = functionName,
                path = remoteFunc:GetFullName(),
                exploitable = testSuccess,
                response = response,
                status = testSuccess and "‚úÖ Exploitable" or "‚ùå Protected"
            })
        end
    end
    
    return results
end

-- Bypass client-side anti-exploits
function ExploitFunctions.bypassAntiExploits()
    local results = {}
    
    -- Look for AntiLeaker scripts
    local antiExploitScripts = {}
    
    local function findAntiExploits(parent)
        for _, child in pairs(parent:GetChildren()) do
            if child.Name:lower():find("anti") or child.Name:lower():find("leak") then
                table.insert(antiExploitScripts, child)
            end
            if child:IsA("Folder") or child:IsA("Model") then
                findAntiExploits(child)
            end
        end
    end
    
    findAntiExploits(Player.PlayerScripts)
    findAntiExploits(game.StarterPlayer.StarterPlayerScripts)
    
    for _, script in ipairs(antiExploitScripts) do
        local bypassSuccess = pcall(function()
            script.Disabled = true
            script:Destroy()
        end)
        
        table.insert(results, {
            name = script.Name,
            path = script:GetFullName(),
            bypassed = bypassSuccess,
            status = bypassSuccess and "‚úÖ Bypassed" or "‚ùå Protected"
        })
    end
    
    return results
end

-- Economy exploits
function ExploitFunctions.testEconomyExploits()
    local economyRemotes = {
        "BuyGearStock",
        "BuySeedStock", 
        "Purchase_Object",
        "Sell_Item",
        "Sell_Inventory",
        "BuyEventShopStock"
    }
    
    local results = {}
    
    for _, remoteName in ipairs(economyRemotes) do
        local success, remote = pcall(function()
            return ReplicatedStorage:FindFirstChild(remoteName, true)
        end)
        
        if success and remote then
            -- Test with negative values or extreme amounts
            local exploitTests = {
                {amount = -999999, item = "TestItem"},
                {amount = 999999999, item = "FreeItem"},
                {price = 0, quantity = 999}
            }
            
            for _, test in ipairs(exploitTests) do
                local testSuccess = pcall(function()
                    if remote:IsA("RemoteEvent") then
                        remote:FireServer(test)
                    else
                        remote:InvokeServer(test)
                    end
                end)
                
                if testSuccess then
                    table.insert(results, {
                        name = remoteName,
                        path = remote:GetFullName(),
                        exploit = "Economy manipulation",
                        payload = test,
                        status = "‚ö†Ô∏è Potentially vulnerable"
                    })
                    break
                end
            end
        end
    end
    
    return results
end

-- Main GUI Creation with enhanced exploit features
local function createMainGui()
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "ExploitSecurityGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local success = pcall(function()
        ScreenGui.Parent = CoreGui
    end)
    if not success then
        ScreenGui.Parent = PlayerGui
    end
    
    return ScreenGui
end

-- Enhanced floating button with exploit indicator
local function createFloatingButton(parent)
    local FloatingButton = Instance.new("Frame")
    FloatingButton.Name = "FloatingButton"
    FloatingButton.Size = UDim2.new(0, 90, 0, 90)
    FloatingButton.Position = UDim2.new(1, -110, 0.5, -45)
    FloatingButton.BackgroundColor3 = Color3.fromRGB(139, 0, 0) -- Dark red for exploit theme
    FloatingButton.BorderSizePixel = 0
    FloatingButton.Active = true
    FloatingButton.Draggable = true
    FloatingButton.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 45)
    Corner.Parent = FloatingButton
    
    -- Animated gradient
    local Gradient = Instance.new("UIGradient")
    Gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(220, 20, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(139, 0, 0))
    }
    Gradient.Rotation = 0
    Gradient.Parent = FloatingButton
    
    -- Rotating gradient animation
    local rotateInfo = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1)
    local rotateTween = TweenService:Create(Gradient, rotateInfo, {Rotation = 360})
    rotateTween:Play()
    
    -- Exploit icon
    local Icon = Instance.new("TextLabel")
    Icon.Name = "Icon"
    Icon.Size = UDim2.new(0.8, 0, 0.8, 0)
    Icon.Position = UDim2.new(0.1, 0, 0.1, 0)
    Icon.BackgroundTransparency = 1
    Icon.Text = "‚ö°"
    Icon.TextColor3 = Color3.fromRGB(255, 255, 255)
    Icon.TextScaled = true
    Icon.Font = Enum.Font.SourceSansBold
    Icon.Parent = FloatingButton
    
    -- Status indicator
    local StatusDot = Instance.new("Frame")
    StatusDot.Name = "StatusDot"
    StatusDot.Size = UDim2.new(0, 20, 0, 20)
    StatusDot.Position = UDim2.new(1, -25, 0, 5)
    StatusDot.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    StatusDot.BorderSizePixel = 0
    StatusDot.Parent = FloatingButton
    
    local DotCorner = Instance.new("UICorner")
    DotCorner.CornerRadius = UDim.new(0, 10)
    DotCorner.Parent = StatusDot
    
    -- Pulsing animation for status dot
    local pulseInfo = TweenInfo.new(1, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true)
    local pulseTween = TweenService:Create(StatusDot, pulseInfo, {BackgroundTransparency = 0.5})
    pulseTween:Play()
    
    return FloatingButton
end

-- Enhanced main interface
local function createMainInterface(parent)
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainInterface"
    MainFrame.Size = UDim2.new(0.95, 0, 0.85, 0)
    MainFrame.Position = UDim2.new(0.025, 0, 0.075, 0)
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    MainFrame.BorderSizePixel = 0
    MainFrame.Visible = false
    MainFrame.Parent = parent
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 15)
    Corner.Parent = MainFrame
    
    -- Animated border
    local Border = Instance.new("UIStroke")
    Border.Color = Color3.fromRGB(220, 20, 60)
    Border.Thickness = 2
    Border.Parent = MainFrame
    
    -- Header with exploit branding
    local Header = Instance.new("Frame")
    Header.Name = "Header"
    Header.Size = UDim2.new(1, 0, 0, 70)
    Header.Position = UDim2.new(0, 0, 0, 0)
    Header.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Header.BorderSizePixel = 0
    Header.Parent = MainFrame
    
    local HeaderCorner = Instance.new("UICorner")
    HeaderCorner.CornerRadius = UDim.new(0, 15)
    HeaderCorner.Parent = Header
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Size = UDim2.new(0.8, 0, 1, 0)
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = "‚ö° EXPLOIT SECURITY GUI"
    Title.TextColor3 = Color3.fromRGB(220, 20, 60)
    Title.TextScaled = true
    Title.Font = Enum.Font.SourceSansBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Header
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 50, 0, 50)
    CloseButton.Position = UDim2.new(1, -60, 0, 10)
    CloseButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = "‚úï"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextScaled = true
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = Header
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 25)
    CloseCorner.Parent = CloseButton
    
    return MainFrame, CloseButton
end

-- Create exploit tabs
local function createExploitTabs(parent)
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.Size = UDim2.new(1, -20, 0, 60)
    TabContainer.Position = UDim2.new(0, 10, 0, 80)
    TabContainer.BackgroundTransparency = 1
    TabContainer.Parent = parent
    
    local TabLayout = Instance.new("UIListLayout")
    TabLayout.FillDirection = Enum.FillDirection.Horizontal
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    TabLayout.Padding = UDim.new(0, 8)
    TabLayout.Parent = TabContainer
    
    local exploitCategories = {
        {name = "Scripts", icon = "üìú", color = Color3.fromRGB(220, 20, 60)},
        {name = "Backdoors", icon = "üö™", color = Color3.fromRGB(255, 69, 0)},
        {name = "Remotes", icon = "üì°", color = Color3.fromRGB(255, 165, 0)},
        {name = "Economy", icon = "üí∞", color = Color3.fromRGB(50, 205, 50)},
        {name = "Bypass", icon = "üõ°Ô∏è", color = Color3.fromRGB(70, 130, 180)}
    }
    
    local tabs = {}
    
    for i, category in ipairs(exploitCategories) do
        local Tab = Instance.new("TextButton")
        Tab.Name = category.name .. "Tab"
        Tab.Size = UDim2.new(0, 140, 1, 0)
        Tab.BackgroundColor3 = i == 1 and category.color or Color3.fromRGB(40, 40, 40)
        Tab.BorderSizePixel = 0
        Tab.Text = category.icon .. " " .. category.name
        Tab.TextColor3 = Color3.fromRGB(255, 255, 255)
        Tab.TextScaled = true
        Tab.Font = Enum.Font.SourceSansBold
        Tab.Parent = TabContainer
        
        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 10)
        TabCorner.Parent = Tab
        
        tabs[category.name] = {button = Tab, color = category.color}
    end
    
    return TabContainer, tabs
end

-- Create exploit content area
local function createExploitContentArea(parent)
    local ContentFrame = Instance.new("ScrollingFrame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Size = UDim2.new(1, -20, 1, -160)
    ContentFrame.Position = UDim2.new(0, 10, 0, 150)
    ContentFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    ContentFrame.BorderSizePixel = 0
    ContentFrame.ScrollBarThickness = 10
    ContentFrame.ScrollBarImageColor3 = Color3.fromRGB(220, 20, 60)
    ContentFrame.Parent = parent
    
    local ContentCorner = Instance.new("UICorner")
    ContentCorner.CornerRadius = UDim.new(0, 10)
    ContentCorner.Parent = ContentFrame
    
    local ContentLayout = Instance.new("UIListLayout")
    ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ContentLayout.Padding = UDim.new(0, 15)
    ContentLayout.Parent = ContentFrame
    
    local ContentPadding = Instance.new("UIPadding")
    ContentPadding.PaddingAll = UDim.new(0, 20)
    ContentPadding.Parent = ContentFrame
    
    return ContentFrame
end

-- Create exploit card with action button
local function createExploitCard(parent, data, exploitType)
    local Card = Instance.new("Frame")
    Card.Name = "ExploitCard"
    Card.Size = UDim2.new(1, 0, 0, 140)
    Card.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Card.BorderSizePixel = 0
    Card.Parent = parent
    
    local CardCorner = Instance.new("UICorner")
    CardCorner.CornerRadius = UDim.new(0, 12)
    CardCorner.Parent = Card
    
    -- Status indicator
    local StatusIndicator = Instance.new("Frame")
    StatusIndicator.Name = "StatusIndicator"
    StatusIndicator.Size = UDim2.new(0, 8, 1, 0)
    StatusIndicator.Position = UDim2.new(0, 0, 0, 0)
    StatusIndicator.BackgroundColor3 = data.exploitable and Color3.fromRGB(220, 20, 60) or Color3.fromRGB(50, 205, 50)
    StatusIndicator.BorderSizePixel = 0
    StatusIndicator.Parent = Card
    
    local IndicatorCorner = Instance.new("UICorner")
    IndicatorCorner.CornerRadius = UDim.new(0, 12)
    IndicatorCorner.Parent = StatusIndicator
    
    -- Content area
    local ContentArea = Instance.new("Frame")
    ContentArea.Name = "ContentArea"
    ContentArea.Size = UDim2.new(0.7, -20, 1, -10)
    ContentArea.Position = UDim2.new(0, 15, 0, 5)
    ContentArea.BackgroundTransparency = 1
    ContentArea.Parent = Card
    
    -- Title
    local ItemTitle = Instance.new("TextLabel")
    ItemTitle.Name = "ItemTitle"
    ItemTitle.Size = UDim2.new(1, 0, 0, 30)
    ItemTitle.Position = UDim2.new(0, 0, 0, 0)
    ItemTitle.BackgroundTransparency = 1
    ItemTitle.Text = data.name or "Unknown Exploit"
    ItemTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    ItemTitle.TextScaled = true
    ItemTitle.Font = Enum.Font.SourceSansBold
    ItemTitle.TextXAlignment = Enum.TextXAlignment.Left
    ItemTitle.Parent = ContentArea
    
    -- Path
    local Path = Instance.new("TextLabel")
    Path.Name = "Path"
    Path.Size = UDim2.new(1, 0, 0, 25)
    Path.Position = UDim2.new(0, 0, 0, 30)
    Path.BackgroundTransparency = 1
    Path.Text = "Path: " .. (data.path or "Unknown")
    Path.TextColor3 = Color3.fromRGB(150, 150, 150)
    Path.TextScaled = true
    Path.Font = Enum.Font.SourceSans
    Path.TextXAlignment = Enum.TextXAlignment.Left
    Path.Parent = ContentArea
    
    -- Status
    local Status = Instance.new("TextLabel")
    Status.Name = "Status"
    Status.Size = UDim2.new(1, 0, 0, 25)
    Status.Position = UDim2.new(0, 0, 0, 55)
    Status.BackgroundTransparency = 1
    Status.Text = data.status or "Unknown Status"
    Status.TextColor3 = data.exploitable and Color3.fromRGB(220, 20, 60) or Color3.fromRGB(50, 205, 50)
    Status.TextScaled = true
    Status.Font = Enum.Font.SourceSansBold
    Status.TextXAlignment = Enum.TextXAlignment.Left
    Status.Parent = ContentArea
    
    -- Exploit button
    local ExploitButton = Instance.new("TextButton")
    ExploitButton.Name = "ExploitButton"
    ExploitButton.Size = UDim2.new(0.25, 0, 0, 50)
    ExploitButton.Position = UDim2.new(0.7, 10, 0, 45)
    ExploitButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    ExploitButton.BorderSizePixel = 0
    ExploitButton.Text = "EXPLOIT"
    ExploitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ExploitButton.TextScaled = true
    ExploitButton.Font = Enum.Font.SourceSansBold
    ExploitButton.Parent = Card
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = UDim.new(0, 8)
    ButtonCorner.Parent = ExploitButton
    
    -- Button click handler
    ExploitButton.MouseButton1Click:Connect(function()
        -- Visual feedback
        local originalColor = ExploitButton.BackgroundColor3
        ExploitButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        wait(0.1)
        ExploitButton.BackgroundColor3 = originalColor
        
        -- Execute exploit based on type
        if exploitType == "remotes" and data.exploitable then
            local remote = ReplicatedStorage:FindFirstChild(data.name, true)
            if remote then
                if remote:IsA("RemoteEvent") then
                    remote:FireServer("EXPLOITED_BY_SECURITY_GUI", {timestamp = tick()})
                elseif remote:IsA("RemoteFunction") then
                    pcall(function()
                        remote:InvokeServer("EXPLOITED_BY_SECURITY_GUI")
                    end)
                end
            end
        elseif exploitType == "bypass" then
            -- Attempt to disable/destroy the anti-exploit
            local script = game:FindFirstChild(data.name, true)
            if script then
                pcall(function()
                    script.Disabled = true
                    script:Destroy()
                end)
            end
        end
        
        print("üö® Exploit executed:", data.name)
    end)
    
    return Card
end

-- Create content for each exploit category
local function createExploitContent(contentFrame, category)
    -- Clear existing content
    for _, child in pairs(contentFrame:GetChildren()) do
        if child:IsA("Frame") and child.Name == "ExploitCard" then
            child:Destroy()
        end
    end
    
    local data = {}
    
    if category == "Scripts" then
        local scriptTest = ExploitFunctions.testServerScriptAccess()
        table.insert(data, {
            name = "ServerScriptService Access",
            path = "game.ServerScriptService",
            status = scriptTest.message,
            exploitable = scriptTest.success
        })
        
    elseif category == "Backdoors" then
        data = ExploitFunctions.testBackdoorRemotes()
        for i, item in ipairs(data) do
            item.status = item.accessible and "‚úÖ Accessible" or "‚ùå Protected"
            item.exploitable = item.accessible
        end
        
    elseif category == "Remotes" then
        local remoteEvents = ExploitFunctions.exploitRemoteEvents()
        local remoteFunctions = ExploitFunctions.exploitRemoteFunctions()
        
        for _, item in ipairs(remoteEvents) do
            table.insert(data, item)
        end
        for _, item in ipairs(remoteFunctions) do
            table.insert(data, item)
        end
        
    elseif category == "Economy" then
        data = ExploitFunctions.testEconomyExploits()
        
    elseif category == "Bypass" then
        data = ExploitFunctions.bypassAntiExploits()
    end
    
    for _, item in ipairs(data) do
        createExploitCard(contentFrame, item, category:lower())
    end
    
    -- Update canvas size
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, #data * 155)
end

-- Main initialization
local function initializeExploitGUI()
    local ScreenGui = createMainGui()
    local FloatingButton = createFloatingButton(ScreenGui)
    local MainInterface, CloseButton = createMainInterface(ScreenGui)
    local TabContainer, Tabs = createExploitTabs(MainInterface)
    local ContentFrame = createExploitContentArea(MainInterface)
    
    local isOpen = false
    local currentCategory = "Scripts"
    
    -- Initialize with scripts category
    createExploitContent(ContentFrame, currentCategory)
    
    -- Floating button click handler
    FloatingButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            isOpen = not isOpen
            
            MainInterface.Visible = true
            
            local tweenInfo = TweenInfo.new(0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
            local targetSize = isOpen and UDim2.new(0.95, 0, 0.85, 0) or UDim2.new(0, 0, 0, 0)
            local targetTransparency = isOpen and 0 or 1
            
            local interfaceTween = TweenService:Create(MainInterface, tweenInfo, {
                Size = targetSize,
                BackgroundTransparency = targetTransparency
            })
            
            interfaceTween:Play()
            
            if not isOpen then
                interfaceTween.Completed:Connect(function()
                    MainInterface.Visible = false
                end)
            end
        end
    end)
    
    -- Close button handler
    CloseButton.MouseButton1Click:Connect(function()
        isOpen = false
        
        local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        local interfaceTween = TweenService:Create(MainInterface, tweenInfo, {
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1
        })
        
        interfaceTween:Play()
        interfaceTween.Completed:Connect(function()
            MainInterface.Visible = false
        end)
    end)
    
    -- Tab click handlers
    for categoryName, tabData in pairs(Tabs) do
        tabData.button.MouseButton1Click:Connect(function()
            -- Update tab appearance
            for _, otherTabData in pairs(Tabs) do
                otherTabData.button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            end
            tabData.button.BackgroundColor3 = tabData.color
            
            currentCategory = categoryName
            createExploitContent(ContentFrame, categoryName)
        end)
    end
    
    -- Mobile optimization
    if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
        MainInterface.Size = UDim2.new(0.98, 0, 0.9, 0)
        MainInterface.Position = UDim2.new(0.01, 0, 0.05, 0)
        FloatingButton.Size = UDim2.new(0, 80, 0, 80)
    end
    
    print("‚ö° EXPLOIT SECURITY GUI LOADED")
    print("üéØ Ready to test vulnerabilities")
    print("üì± Mobile-optimized interface active")
    print("üö® Use responsibly for security testing only!")
end

-- Initialize the exploit GUI
initializeExploitGUI()